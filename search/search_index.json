{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Chironex Documentation Project Introduction This is Chironex : A Jellyfish Organism-Inspired Supervised Machine Learning Framework. The project is divided into 2 parts: sklearn-estimators jellyfish-system sklearn-estimators This is a project is built upon the specification of customized estimators of scikit-learn . We implemented the natural behavior of a group of organisms into a pytorch-based neural network. jellyfish-system In this project, we proposed a machine learning framework for supervised learning tasks, which is inspired by the message passing and opinion formation of a group of organisms. Specifically, we use jellyfish as the analogy of the deep neural networks, and the environment of the ocean as our dataset. Besides devising and implementing the system to simulate the interaction of the jellyfish and the environment, we also provide a creative mechanism that allows the jellyfish\u2019s prediction of data to converge by looking at other jellyfish\u2019s messages. We validated our Chironex framework using the Titanic dataset and compared the accuracy against a Multilayer Perceptron (MLP) implemented using sklearn, a popular machine learning framework. Though the experiment result shows little performance advantage over the traditional ones, the future direction of this project would highlight the improvement of accuracy as well as the convergence of the predictions of the jellyfish swarm. Furthermore, the resulting pre-trained jellyfish will be deployed into team Atolla\u2019s cellular automaton environment, whose goal is to observe the evolution of the jellyfish species and the convergence of the environmental state. The higher goal of this joint project is to explain some phenomenon that arises in a complicated social network. Documentation Introduction For sklearn-estimators : Usage : How to use sklearn-estimators Design : The design implementation details with function descriptions and code Note Currently jellyfish-system can be used on any classification problem For jellyfish-system : Usage : How to use Jellyfish system on classfication problems Training and Plotting Integration with Atolla's environment Design : The design implementation details with function descriptions and code Engine : Engine class Logger : Logger class (used within Engine classs) Jellyfish : Jellyfish class Learner : Learner class (used within Jellyfish class) Grid : Grid class Cell : Cell class Message : Message class","title":"Home"},{"location":"#welcome-to-chironex-documentation","text":"","title":"Welcome to Chironex Documentation"},{"location":"#project-introduction","text":"This is Chironex : A Jellyfish Organism-Inspired Supervised Machine Learning Framework. The project is divided into 2 parts: sklearn-estimators jellyfish-system","title":"Project Introduction"},{"location":"#sklearn-estimators","text":"This is a project is built upon the specification of customized estimators of scikit-learn . We implemented the natural behavior of a group of organisms into a pytorch-based neural network.","title":"sklearn-estimators"},{"location":"#jellyfish-system","text":"In this project, we proposed a machine learning framework for supervised learning tasks, which is inspired by the message passing and opinion formation of a group of organisms. Specifically, we use jellyfish as the analogy of the deep neural networks, and the environment of the ocean as our dataset. Besides devising and implementing the system to simulate the interaction of the jellyfish and the environment, we also provide a creative mechanism that allows the jellyfish\u2019s prediction of data to converge by looking at other jellyfish\u2019s messages. We validated our Chironex framework using the Titanic dataset and compared the accuracy against a Multilayer Perceptron (MLP) implemented using sklearn, a popular machine learning framework. Though the experiment result shows little performance advantage over the traditional ones, the future direction of this project would highlight the improvement of accuracy as well as the convergence of the predictions of the jellyfish swarm. Furthermore, the resulting pre-trained jellyfish will be deployed into team Atolla\u2019s cellular automaton environment, whose goal is to observe the evolution of the jellyfish species and the convergence of the environmental state. The higher goal of this joint project is to explain some phenomenon that arises in a complicated social network.","title":"jellyfish-system"},{"location":"#documentation-introduction","text":"For sklearn-estimators : Usage : How to use sklearn-estimators Design : The design implementation details with function descriptions and code Note Currently jellyfish-system can be used on any classification problem For jellyfish-system : Usage : How to use Jellyfish system on classfication problems Training and Plotting Integration with Atolla's environment Design : The design implementation details with function descriptions and code Engine : Engine class Logger : Logger class (used within Engine classs) Jellyfish : Jellyfish class Learner : Learner class (used within Jellyfish class) Grid : Grid class Cell : Cell class Message : Message class","title":"Documentation Introduction"},{"location":"about/","text":"About Advisor Prof. Dr. Gerald Friedland Eleanor Cawthon Team members: Po-Yu Chou William Chen Yi-Chun Chang Reference Brainome. (2019). Brainome - Solve machine learning problems with Zero code. Retrieved March 1, 2022, from https://www.brainome.ai/ Friedland, G. (2021). Experimental Design for Machine Learning on Multimedia Data Lecture 3. Experimental Design for Machine Learning on Multimedia Data Lecture 3. Retrieved March 1, 2022, from https://www1.icsi.berkeley.edu/~fractor/fall2021/ewExternalFiles/cs294-3-1.pdf Friedland, G. (2021). Experimental Design for Machine Learning on Multimedia Data Lecture 4. ICSI, Berkeley. Retrieved March 1, 2022, from https://www1.icsi.berkeley.edu/~fractor/fall2021/ewExternalFiles/cs294-4-1.pdf Kaggle. (2012, September 28). Titanic - Machine Learning from Disaster. Kaggle. Retrieved March 1, 2022, from https://www.kaggle.com/c/titanic/overview scikit-learn. (2007, June). scikit-learn: machine learning in Python \u2014 scikit-learn 1.0.2 documentation. Retrieved March 1, 2022, from https://scikit-learn.org/stable/ Semenov, A. (2018, August 31). How do jellyfish perceive the world? \u2013 The Helm Lab Blog. The Helm Lab Blog. Retrieved March 1, 2022, from https://jellybiologist.com/2018/08/31/how-do-jellyfish-see-the-world/ Bruijn, L. de. (2020, July 18). Inter-annotator agreement (IAA). Medium. Retrieved April 11, 2022, from https://towardsdatascience.com/inter-annotator-agreement-2f46c6d37bf3 Inter annotator agreement - brandeis university. Inter annotator agreement. (2017, February 28). Retrieved April 11, 2022, from https://www.cs.brandeis.edu/~cs140b/CS140b_slides/CS140_Lect_7_InterAnnotatorAgreement.pdf German, B.. (1987). Glass Identification. UCI Machine Learning Repository from https://archive-beta.ics.uci.edu/ml/datasets/glass+identification Documentation Tool Documentation based on mkdocs.org .","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#advisor","text":"Prof. Dr. Gerald Friedland Eleanor Cawthon","title":"Advisor"},{"location":"about/#team-members","text":"Po-Yu Chou William Chen Yi-Chun Chang","title":"Team members:"},{"location":"about/#reference","text":"Brainome. (2019). Brainome - Solve machine learning problems with Zero code. Retrieved March 1, 2022, from https://www.brainome.ai/ Friedland, G. (2021). Experimental Design for Machine Learning on Multimedia Data Lecture 3. Experimental Design for Machine Learning on Multimedia Data Lecture 3. Retrieved March 1, 2022, from https://www1.icsi.berkeley.edu/~fractor/fall2021/ewExternalFiles/cs294-3-1.pdf Friedland, G. (2021). Experimental Design for Machine Learning on Multimedia Data Lecture 4. ICSI, Berkeley. Retrieved March 1, 2022, from https://www1.icsi.berkeley.edu/~fractor/fall2021/ewExternalFiles/cs294-4-1.pdf Kaggle. (2012, September 28). Titanic - Machine Learning from Disaster. Kaggle. Retrieved March 1, 2022, from https://www.kaggle.com/c/titanic/overview scikit-learn. (2007, June). scikit-learn: machine learning in Python \u2014 scikit-learn 1.0.2 documentation. Retrieved March 1, 2022, from https://scikit-learn.org/stable/ Semenov, A. (2018, August 31). How do jellyfish perceive the world? \u2013 The Helm Lab Blog. The Helm Lab Blog. Retrieved March 1, 2022, from https://jellybiologist.com/2018/08/31/how-do-jellyfish-see-the-world/ Bruijn, L. de. (2020, July 18). Inter-annotator agreement (IAA). Medium. Retrieved April 11, 2022, from https://towardsdatascience.com/inter-annotator-agreement-2f46c6d37bf3 Inter annotator agreement - brandeis university. Inter annotator agreement. (2017, February 28). Retrieved April 11, 2022, from https://www.cs.brandeis.edu/~cs140b/CS140b_slides/CS140_Lect_7_InterAnnotatorAgreement.pdf German, B.. (1987). Glass Identification. UCI Machine Learning Repository from https://archive-beta.ics.uci.edu/ml/datasets/glass+identification","title":"Reference"},{"location":"about/#documentation-tool","text":"Documentation based on mkdocs.org .","title":"Documentation Tool"},{"location":"jellyfish-system/Design/Cell/","text":"Cell class Cell is the fundamental unit for Jellyfish to travel around Composed of a batch of sample data and a Message class to store information Parameter X : numpy array, training data to store in current cell y : numpy array, label data to store in current cell msg : Message class, messages to store trace of Jellyfish Functions update_msg \"\"\" Wrapper function to update messages in Message class Parameters ---------- score : float The score of given weight weight : pytorch.tensor The weight which needed to be put into this message queue \"\"\" def update_msg ( score , weight ) get_msg \"\"\" Wrapper function to get all scores and weights of current message queue \"\"\" def get_msg () get_data \"\"\" Get training data and labels from current cell \"\"\" def get_data ()","title":"Cell"},{"location":"jellyfish-system/Design/Cell/#cell-class","text":"Cell is the fundamental unit for Jellyfish to travel around Composed of a batch of sample data and a Message class to store information","title":"Cell class"},{"location":"jellyfish-system/Design/Cell/#parameter","text":"X : numpy array, training data to store in current cell y : numpy array, label data to store in current cell msg : Message class, messages to store trace of Jellyfish","title":"Parameter"},{"location":"jellyfish-system/Design/Cell/#functions","text":"","title":"Functions"},{"location":"jellyfish-system/Design/Cell/#update_msg","text":"\"\"\" Wrapper function to update messages in Message class Parameters ---------- score : float The score of given weight weight : pytorch.tensor The weight which needed to be put into this message queue \"\"\" def update_msg ( score , weight )","title":"update_msg"},{"location":"jellyfish-system/Design/Cell/#get_msg","text":"\"\"\" Wrapper function to get all scores and weights of current message queue \"\"\" def get_msg ()","title":"get_msg"},{"location":"jellyfish-system/Design/Cell/#get_data","text":"\"\"\" Get training data and labels from current cell \"\"\" def get_data ()","title":"get_data"},{"location":"jellyfish-system/Design/Engine/","text":"Engine class Engine class The class to integrate all modules and execute the simulation process Instantiate all variables and run them through designated rounds Parameter grid_width : int, width of the Grid grid_height : int, height of the Grid max_iter : int, number of training iterations n_jellyfish : int, number of jellyfish msg_cap : int, number of messages stored in the Message time : int, iteration counter train_data : training data test_data : test data X_test : test data attribute y_test : test data label swarm : array, array of jellyfish and their coordinates ocean : Grid n_features : int, number of features of training data n_classes : int, number of classes of training data eval_every : int, number of iteration per evaluation logger : Logger object, combine logging information to print eval_when : int, evaluation rounds eval_mean : float, mean of accuracy eval_std : float, standard deviation of accuracy agreement : array, store annotator's agreement Class Variable Metadata : class, Data structure to for the jellyfish entity and its coordinate Class Prameter entity : Jellyfish object, entity of the Jellyfish object coord : tuple of int, coordinate of the Jellyfish Functions Note _ prefix for functions are subroutine. run \"\"\" Run the simulation Parameters ---------- verbose : bool Set to true to print more info Return ---------- None \"\"\" def run ( verbose = False ) _run_one_step \"\"\" Run one step of simulation, subroutine of function `run` Parameters ---------- verbose : bool Set to true to log out more info Return ---------- None \"\"\" def _run_one_step ( verbose = False ) _validate \"\"\" Validate the swarm by calculating the following metric 1. Annotator's agreement 2. Mean of accuracy 3. Standard deviation of accuracy Parameters ---------- step : int Current round index Return ---------- None \"\"\" def _validate ( step ) _transition \"\"\" Define how coordinate changes, in place update Parameters ---------- Return ---------- \"\"\" def _transition () plot_individual_result \"\"\" Plot each of individual Jellyfish's validation accuracy Parameters ---------- Return ---------- \"\"\" def plot_individual_result () plot_swarm_result \"\"\" Plot the swarm's mean and std validation accuracy Parameters ---------- Return ---------- \"\"\" def plot_swarm_result () Outside class functions Info Functions not defined in the Engine class but are used within Engine class gen_random_coord \"\"\" Generate a random 2d coordinate Parameters ---------- x_boundary : int Range of x is [0, x_boundary) y_boundary: int Range of y is [0, y_boundary) Return ---------- (x_coord, y_coord) : tuple 2d coordinate \"\"\" def gen_random_coord ( x_boundary , y_boundary ) shuffle_n_partition \"\"\" Shuffle and divide the dataset into training and validation set Parameters ---------- dataset : dataframe Target dataset test_size : int or float If data type is int, then |validation set| = test_size Else if data type is float, then |validation set| = int(|dataset| * test_size) normalize: bool Whether to normalize values for a feature random_state: int Random seed Return ---------- train, test : tuple Training and validation set \"\"\" def shuffle_n_partition ( dataset , test_size , normalize = False , random_state = 42 ):","title":"Engine"},{"location":"jellyfish-system/Design/Engine/#engine-class","text":"Engine class The class to integrate all modules and execute the simulation process Instantiate all variables and run them through designated rounds","title":"Engine class"},{"location":"jellyfish-system/Design/Engine/#parameter","text":"grid_width : int, width of the Grid grid_height : int, height of the Grid max_iter : int, number of training iterations n_jellyfish : int, number of jellyfish msg_cap : int, number of messages stored in the Message time : int, iteration counter train_data : training data test_data : test data X_test : test data attribute y_test : test data label swarm : array, array of jellyfish and their coordinates ocean : Grid n_features : int, number of features of training data n_classes : int, number of classes of training data eval_every : int, number of iteration per evaluation logger : Logger object, combine logging information to print eval_when : int, evaluation rounds eval_mean : float, mean of accuracy eval_std : float, standard deviation of accuracy agreement : array, store annotator's agreement","title":"Parameter"},{"location":"jellyfish-system/Design/Engine/#class-variable","text":"Metadata : class, Data structure to for the jellyfish entity and its coordinate","title":"Class Variable"},{"location":"jellyfish-system/Design/Engine/#class-prameter","text":"entity : Jellyfish object, entity of the Jellyfish object coord : tuple of int, coordinate of the Jellyfish","title":"Class Prameter"},{"location":"jellyfish-system/Design/Engine/#functions","text":"Note _ prefix for functions are subroutine.","title":"Functions"},{"location":"jellyfish-system/Design/Engine/#run","text":"\"\"\" Run the simulation Parameters ---------- verbose : bool Set to true to print more info Return ---------- None \"\"\" def run ( verbose = False )","title":"run"},{"location":"jellyfish-system/Design/Engine/#_run_one_step","text":"\"\"\" Run one step of simulation, subroutine of function `run` Parameters ---------- verbose : bool Set to true to log out more info Return ---------- None \"\"\" def _run_one_step ( verbose = False )","title":"_run_one_step"},{"location":"jellyfish-system/Design/Engine/#_validate","text":"\"\"\" Validate the swarm by calculating the following metric 1. Annotator's agreement 2. Mean of accuracy 3. Standard deviation of accuracy Parameters ---------- step : int Current round index Return ---------- None \"\"\" def _validate ( step )","title":"_validate"},{"location":"jellyfish-system/Design/Engine/#_transition","text":"\"\"\" Define how coordinate changes, in place update Parameters ---------- Return ---------- \"\"\" def _transition ()","title":"_transition"},{"location":"jellyfish-system/Design/Engine/#plot_individual_result","text":"\"\"\" Plot each of individual Jellyfish's validation accuracy Parameters ---------- Return ---------- \"\"\" def plot_individual_result ()","title":"plot_individual_result"},{"location":"jellyfish-system/Design/Engine/#plot_swarm_result","text":"\"\"\" Plot the swarm's mean and std validation accuracy Parameters ---------- Return ---------- \"\"\" def plot_swarm_result ()","title":"plot_swarm_result"},{"location":"jellyfish-system/Design/Engine/#outside-class-functions","text":"Info Functions not defined in the Engine class but are used within Engine class","title":"Outside class functions"},{"location":"jellyfish-system/Design/Engine/#gen_random_coord","text":"\"\"\" Generate a random 2d coordinate Parameters ---------- x_boundary : int Range of x is [0, x_boundary) y_boundary: int Range of y is [0, y_boundary) Return ---------- (x_coord, y_coord) : tuple 2d coordinate \"\"\" def gen_random_coord ( x_boundary , y_boundary )","title":"gen_random_coord"},{"location":"jellyfish-system/Design/Engine/#shuffle_n_partition","text":"\"\"\" Shuffle and divide the dataset into training and validation set Parameters ---------- dataset : dataframe Target dataset test_size : int or float If data type is int, then |validation set| = test_size Else if data type is float, then |validation set| = int(|dataset| * test_size) normalize: bool Whether to normalize values for a feature random_state: int Random seed Return ---------- train, test : tuple Training and validation set \"\"\" def shuffle_n_partition ( dataset , test_size , normalize = False , random_state = 42 ):","title":"shuffle_n_partition"},{"location":"jellyfish-system/Design/Grid/","text":"Grid class \"Sea\" for Jellyfish to travel in A 2D array of Cell class which Jellyfish would be put on Parameter shape : tuple of int, shape of the grid e.g. (4,3) -> 4 rows and 3 cols msg_capacity : int, max amount of messages to pass into Message class Class Variable grid : dict key : tuple of int, coordinate value : Cell class n_features : int, number of features of training data n_classes : int, number of classes of training data Functions read \"\"\" Generate Grid and sample data into each Cell Parameters ---------- data : numpy array training data to be put onto Grid \"\"\" def read ( data ) get \"\"\" Get training data and labels from current cell Parameters ---------- coord : tuple of int return Cell of given coord \"\"\" def get ( coord )","title":"Grid"},{"location":"jellyfish-system/Design/Grid/#grid-class","text":"\"Sea\" for Jellyfish to travel in A 2D array of Cell class which Jellyfish would be put on","title":"Grid class"},{"location":"jellyfish-system/Design/Grid/#parameter","text":"shape : tuple of int, shape of the grid e.g. (4,3) -> 4 rows and 3 cols msg_capacity : int, max amount of messages to pass into Message class","title":"Parameter"},{"location":"jellyfish-system/Design/Grid/#class-variable","text":"grid : dict key : tuple of int, coordinate value : Cell class n_features : int, number of features of training data n_classes : int, number of classes of training data","title":"Class Variable"},{"location":"jellyfish-system/Design/Grid/#functions","text":"","title":"Functions"},{"location":"jellyfish-system/Design/Grid/#read","text":"\"\"\" Generate Grid and sample data into each Cell Parameters ---------- data : numpy array training data to be put onto Grid \"\"\" def read ( data )","title":"read"},{"location":"jellyfish-system/Design/Grid/#get","text":"\"\"\" Get training data and labels from current cell Parameters ---------- coord : tuple of int return Cell of given coord \"\"\" def get ( coord )","title":"get"},{"location":"jellyfish-system/Design/Jellyfish/","text":"Jellyfish class Abstract class act as Jellyfish Wrapper class for Learner (Learner as critter) Interaction methods are implemented here Merge methods are implemented here Mutate methods are implemented here (For Atolla's environment) Note Merge and Mutate is implemented in the jellyfish.py but is not a part of the class. Whether to integrate it with the Jellyfish class is still debatable Parameter n_features : int, number of features of training data n_classes : int, number of classes of training data Class Variable mutate_portion : float, percentage of weights should be mutated when called learner : class Learner, machine learner act as critter Functions interact \"\"\" Interact with the cell Either train using the data or generate new weights and decide which to store Parameters ---------- cell : class Cell The cell which current Jellyfish is in \"\"\" def interact ( cell , verbose = False ) leave_trace \"\"\" Leave trace in the Message of this Cell with given data Parameters ---------- X : numpy array Training data y : numpy array Training label \"\"\" def leave_trace ( X , y ) score \"\"\" Call score function of Learner Parameters ---------- X : numpy array Training data y : numpy array Training label \"\"\" def score ( X , y ) predict \"\"\" Call predict function of Learner Parameters ---------- X : numpy array Training data y : numpy array Training label \"\"\" def predict ( X ) set_weight \"\"\" Set the param weight to current Jellyfish Parameters ---------- weight : pytorch.tensor The weight which needed to be put in current Jellyfish \"\"\" def set_weight ( weight ) mutate_weight \"\"\" Call outside class mutate function to mutate weight of current Jellyfish \"\"\" def mutate_weight ()","title":"Jellyfish"},{"location":"jellyfish-system/Design/Jellyfish/#jellyfish-class","text":"Abstract class act as Jellyfish Wrapper class for Learner (Learner as critter) Interaction methods are implemented here Merge methods are implemented here Mutate methods are implemented here (For Atolla's environment) Note Merge and Mutate is implemented in the jellyfish.py but is not a part of the class. Whether to integrate it with the Jellyfish class is still debatable","title":"Jellyfish class"},{"location":"jellyfish-system/Design/Jellyfish/#parameter","text":"n_features : int, number of features of training data n_classes : int, number of classes of training data","title":"Parameter"},{"location":"jellyfish-system/Design/Jellyfish/#class-variable","text":"mutate_portion : float, percentage of weights should be mutated when called learner : class Learner, machine learner act as critter","title":"Class Variable"},{"location":"jellyfish-system/Design/Jellyfish/#functions","text":"","title":"Functions"},{"location":"jellyfish-system/Design/Jellyfish/#interact","text":"\"\"\" Interact with the cell Either train using the data or generate new weights and decide which to store Parameters ---------- cell : class Cell The cell which current Jellyfish is in \"\"\" def interact ( cell , verbose = False )","title":"interact"},{"location":"jellyfish-system/Design/Jellyfish/#leave_trace","text":"\"\"\" Leave trace in the Message of this Cell with given data Parameters ---------- X : numpy array Training data y : numpy array Training label \"\"\" def leave_trace ( X , y )","title":"leave_trace"},{"location":"jellyfish-system/Design/Jellyfish/#score","text":"\"\"\" Call score function of Learner Parameters ---------- X : numpy array Training data y : numpy array Training label \"\"\" def score ( X , y )","title":"score"},{"location":"jellyfish-system/Design/Jellyfish/#predict","text":"\"\"\" Call predict function of Learner Parameters ---------- X : numpy array Training data y : numpy array Training label \"\"\" def predict ( X )","title":"predict"},{"location":"jellyfish-system/Design/Jellyfish/#set_weight","text":"\"\"\" Set the param weight to current Jellyfish Parameters ---------- weight : pytorch.tensor The weight which needed to be put in current Jellyfish \"\"\" def set_weight ( weight )","title":"set_weight"},{"location":"jellyfish-system/Design/Jellyfish/#mutate_weight","text":"\"\"\" Call outside class mutate function to mutate weight of current Jellyfish \"\"\" def mutate_weight ()","title":"mutate_weight"},{"location":"jellyfish-system/Design/Learner/","text":"Learner class Machine Learner for each Jellyfish Can be modified by users Current implementation as a MLP An extention of sklearn estimators Info Actually class name is TorchMLP(BaseEstimator) inside file learner.py Parameter n_features : int, number of features of training data n_classes : int, number of classes of training data hidden_nodes : int, default=5, number of MLP hidden nodes batch_size : int, default=7, batch size for MLP n_iter : int, defualt=10, number of iteration for MLP verbose : int(bool), default=0/False, print out debug info or not random_state : int, default=42, random seed lr : int, default=1e-4, learning rate for MLP Class Variable network : pytorch.nn.Sequential, Pytorch MLP implementation Functions forward \"\"\" Implementation of forward of sklearn estimators of current MLP version Parameters ---------- x : numpy array Training data \"\"\" def forward ( x ) fit \"\"\" Implementation of fit of sklearn estimators of current MLP version Fit the model to the data X. Parameters ---------- X : numpy array Training data y : numpy array Training label \"\"\" def fit ( X , y ) _fit \"\"\" Underlying actual fit function to fit the model to the data X. Parameters ---------- X : numpy array Training data y : numpy array Training label rng: Deprecated, Not used anymore \"\"\" def _fit ( self , X , y , rng ): predict \"\"\" Implementation of predict of sklearn estimators of current MLP version Predict using the model with X. Parameters ---------- X : numpy array Training data \"\"\" def predict ( X ) score \"\"\" Implementation of score of sklearn estimators of current MLP version Get the accuracy of predictions over labels Parameters ---------- X : numpy array Training data y : numpy array Training label \"\"\" def score ( X , y ) weight \"\"\" Retrieve weight of current Learner \"\"\" def weight () set_weight \"\"\" Set weight of current learner to param weight Parameters ---------- weight : pytorch.tensor The weight which needed to be put into Learner \"\"\" def set_weight ( weight )","title":"Learner"},{"location":"jellyfish-system/Design/Learner/#learner-class","text":"Machine Learner for each Jellyfish Can be modified by users Current implementation as a MLP An extention of sklearn estimators Info Actually class name is TorchMLP(BaseEstimator) inside file learner.py","title":"Learner class"},{"location":"jellyfish-system/Design/Learner/#parameter","text":"n_features : int, number of features of training data n_classes : int, number of classes of training data hidden_nodes : int, default=5, number of MLP hidden nodes batch_size : int, default=7, batch size for MLP n_iter : int, defualt=10, number of iteration for MLP verbose : int(bool), default=0/False, print out debug info or not random_state : int, default=42, random seed lr : int, default=1e-4, learning rate for MLP","title":"Parameter"},{"location":"jellyfish-system/Design/Learner/#class-variable","text":"network : pytorch.nn.Sequential, Pytorch MLP implementation","title":"Class Variable"},{"location":"jellyfish-system/Design/Learner/#functions","text":"","title":"Functions"},{"location":"jellyfish-system/Design/Learner/#forward","text":"\"\"\" Implementation of forward of sklearn estimators of current MLP version Parameters ---------- x : numpy array Training data \"\"\" def forward ( x )","title":"forward"},{"location":"jellyfish-system/Design/Learner/#fit","text":"\"\"\" Implementation of fit of sklearn estimators of current MLP version Fit the model to the data X. Parameters ---------- X : numpy array Training data y : numpy array Training label \"\"\" def fit ( X , y )","title":"fit"},{"location":"jellyfish-system/Design/Learner/#_fit","text":"\"\"\" Underlying actual fit function to fit the model to the data X. Parameters ---------- X : numpy array Training data y : numpy array Training label rng: Deprecated, Not used anymore \"\"\" def _fit ( self , X , y , rng ):","title":"_fit"},{"location":"jellyfish-system/Design/Learner/#predict","text":"\"\"\" Implementation of predict of sklearn estimators of current MLP version Predict using the model with X. Parameters ---------- X : numpy array Training data \"\"\" def predict ( X )","title":"predict"},{"location":"jellyfish-system/Design/Learner/#score","text":"\"\"\" Implementation of score of sklearn estimators of current MLP version Get the accuracy of predictions over labels Parameters ---------- X : numpy array Training data y : numpy array Training label \"\"\" def score ( X , y )","title":"score"},{"location":"jellyfish-system/Design/Learner/#weight","text":"\"\"\" Retrieve weight of current Learner \"\"\" def weight ()","title":"weight"},{"location":"jellyfish-system/Design/Learner/#set_weight","text":"\"\"\" Set weight of current learner to param weight Parameters ---------- weight : pytorch.tensor The weight which needed to be put into Learner \"\"\" def set_weight ( weight )","title":"set_weight"},{"location":"jellyfish-system/Design/Logger/","text":"Logger class Logger is the class for logging out the information for debugging Parameter idx : int, index for the Jellyfish jellyfish : Jellyfish object, Target machine learner scores : array of floats, scores for predicting results of Jellyfish objects","title":"Logger"},{"location":"jellyfish-system/Design/Logger/#logger-class","text":"Logger is the class for logging out the information for debugging","title":"Logger class"},{"location":"jellyfish-system/Design/Logger/#parameter","text":"idx : int, index for the Jellyfish jellyfish : Jellyfish object, Target machine learner scores : array of floats, scores for predicting results of Jellyfish objects","title":"Parameter"},{"location":"jellyfish-system/Design/Message/","text":"Message class Traces are left behind in each cell by Jellyfish when visiting These traces are stored in this Message class Parameter capacity : int, max amount of messages Class Variable messages : list, queue to store traces index : int, initial = 0, Warning index is used to indicate current size of message, but is deprecated, should be removed from code Functions update \"\"\" Update the current messages queue with score and weight in param Parameters ---------- score : float The score of given weight weight : pytorch.tensor The weight which needed to be put into this message queue \"\"\" def update ( score , weight ) get \"\"\" Get all scores and weights of current message queue \"\"\" def get () class Cell Cell is the fundamental unit for Jellyfish to travel around Composed of a batch of sample data and a Message class to store information Parameter X : numpy array, training data to store in current cell y : numpy array, label data to store in current cell msg : Message class, messages to store trace of Jellyfish Functions update_msg \"\"\" Wrapper function to update messages in Message class Parameters ---------- score : float The score of given weight weight : pytorch.tensor The weight which needed to be put into this message queue \"\"\" def update_msg ( score , weight ) get_msg \"\"\" Wrapper function to get all scores and weights of current message queue \"\"\" def get_msg () get_data \"\"\" Get training data and labels from current cell \"\"\" def get_data ()","title":"Message"},{"location":"jellyfish-system/Design/Message/#message-class","text":"Traces are left behind in each cell by Jellyfish when visiting These traces are stored in this Message class","title":"Message class"},{"location":"jellyfish-system/Design/Message/#parameter","text":"capacity : int, max amount of messages","title":"Parameter"},{"location":"jellyfish-system/Design/Message/#class-variable","text":"messages : list, queue to store traces index : int, initial = 0, Warning index is used to indicate current size of message, but is deprecated, should be removed from code","title":"Class Variable"},{"location":"jellyfish-system/Design/Message/#functions","text":"","title":"Functions"},{"location":"jellyfish-system/Design/Message/#update","text":"\"\"\" Update the current messages queue with score and weight in param Parameters ---------- score : float The score of given weight weight : pytorch.tensor The weight which needed to be put into this message queue \"\"\" def update ( score , weight )","title":"update"},{"location":"jellyfish-system/Design/Message/#get","text":"\"\"\" Get all scores and weights of current message queue \"\"\" def get ()","title":"get"},{"location":"jellyfish-system/Design/Message/#class-cell","text":"Cell is the fundamental unit for Jellyfish to travel around Composed of a batch of sample data and a Message class to store information","title":"class Cell"},{"location":"jellyfish-system/Design/Message/#parameter_1","text":"X : numpy array, training data to store in current cell y : numpy array, label data to store in current cell msg : Message class, messages to store trace of Jellyfish","title":"Parameter"},{"location":"jellyfish-system/Design/Message/#functions_1","text":"","title":"Functions"},{"location":"jellyfish-system/Design/Message/#update_msg","text":"\"\"\" Wrapper function to update messages in Message class Parameters ---------- score : float The score of given weight weight : pytorch.tensor The weight which needed to be put into this message queue \"\"\" def update_msg ( score , weight )","title":"update_msg"},{"location":"jellyfish-system/Design/Message/#get_msg","text":"\"\"\" Wrapper function to get all scores and weights of current message queue \"\"\" def get_msg ()","title":"get_msg"},{"location":"jellyfish-system/Design/Message/#get_data","text":"\"\"\" Get training data and labels from current cell \"\"\" def get_data ()","title":"get_data"},{"location":"jellyfish-system/Usage/Integration%20with%20Atolla%27s%20environment/","text":"Usage Introduction Trained Jellyfish act as critter brains in Atolla's environment Users need to embed Jellyfish into Atolla's environment And then train and export weights of Jellyfish as a result to be applied to the environment Dataset When integrate with Atolla, the number of class should match the number of action in Atolla's settings Current setting of Atolla requires number of class >= 4 A sample dataset glass.csv matches the requirement is provided in the repo Warning Atolla had not implemented the interface to use Chironex as critter by 05/2022 How to use Preprocess dataset Copy dataset to Critter_Env_Interface folder Modify core.py to of read_csv to make sure the dataset can be read Use python core.py to generate weights Use function load_info in core.py to load the weights into Atolla's environment","title":"Integration with Atolla's environment"},{"location":"jellyfish-system/Usage/Integration%20with%20Atolla%27s%20environment/#usage","text":"","title":"Usage"},{"location":"jellyfish-system/Usage/Integration%20with%20Atolla%27s%20environment/#introduction","text":"Trained Jellyfish act as critter brains in Atolla's environment Users need to embed Jellyfish into Atolla's environment And then train and export weights of Jellyfish as a result to be applied to the environment","title":"Introduction"},{"location":"jellyfish-system/Usage/Integration%20with%20Atolla%27s%20environment/#dataset","text":"When integrate with Atolla, the number of class should match the number of action in Atolla's settings Current setting of Atolla requires number of class >= 4 A sample dataset glass.csv matches the requirement is provided in the repo Warning Atolla had not implemented the interface to use Chironex as critter by 05/2022","title":"Dataset"},{"location":"jellyfish-system/Usage/Integration%20with%20Atolla%27s%20environment/#how-to-use","text":"Preprocess dataset Copy dataset to Critter_Env_Interface folder Modify core.py to of read_csv to make sure the dataset can be read Use python core.py to generate weights Use function load_info in core.py to load the weights into Atolla's environment","title":"How to use"},{"location":"jellyfish-system/Usage/Training%20and%20Plotting/","text":"Training and Plotting Introduction Simply train and test with dataset Plot the performance of Jellyfish Dataset In training mode, the number of class does not matter Any tabular classification dataset can be used to train Chironex after preprocessing A sample dataset is provided in the repo which is the cleaned and preprocessed version of Titanic dataset This dataset contains only features without the first line of the names of all features All other datasets should be preproccessed into the same format like the sample dataset to proceed with Chironex How to use Preproccess dataset Copy dataset to jellyfish-system folder Open engine.py -> Jump to if __name__ == __main__: Change filename in read_csv to your own dataset Since this is only training, use python engine.py to execute Several plots would be visualized regarding the result of individual and swarm result","title":"Training and Plotting"},{"location":"jellyfish-system/Usage/Training%20and%20Plotting/#training-and-plotting","text":"","title":"Training and Plotting"},{"location":"jellyfish-system/Usage/Training%20and%20Plotting/#introduction","text":"Simply train and test with dataset Plot the performance of Jellyfish","title":"Introduction"},{"location":"jellyfish-system/Usage/Training%20and%20Plotting/#dataset","text":"In training mode, the number of class does not matter Any tabular classification dataset can be used to train Chironex after preprocessing A sample dataset is provided in the repo which is the cleaned and preprocessed version of Titanic dataset This dataset contains only features without the first line of the names of all features All other datasets should be preproccessed into the same format like the sample dataset to proceed with Chironex","title":"Dataset"},{"location":"jellyfish-system/Usage/Training%20and%20Plotting/#how-to-use","text":"Preproccess dataset Copy dataset to jellyfish-system folder Open engine.py -> Jump to if __name__ == __main__: Change filename in read_csv to your own dataset Since this is only training, use python engine.py to execute Several plots would be visualized regarding the result of individual and swarm result","title":"How to use"},{"location":"sklearn-estimators/sklearn-estimators-design/","text":"Design Details of sklearn-estimators class Parameter var : int, content Class Variable var : type, content Functions example_func \"\"\" Update the current messages queue with score and weight in param Parameters ---------- score : float The score of given weight weight : pytorch.tensor The weight which needed to be put into this message queue \"\"\" def update ( score , weight )","title":"Design"},{"location":"sklearn-estimators/sklearn-estimators-design/#design-details-of-sklearn-estimators","text":"","title":"Design Details of sklearn-estimators"},{"location":"sklearn-estimators/sklearn-estimators-design/#class","text":"","title":"class"},{"location":"sklearn-estimators/sklearn-estimators-design/#parameter","text":"var : int, content","title":"Parameter"},{"location":"sklearn-estimators/sklearn-estimators-design/#class-variable","text":"var : type, content","title":"Class Variable"},{"location":"sklearn-estimators/sklearn-estimators-design/#functions","text":"","title":"Functions"},{"location":"sklearn-estimators/sklearn-estimators-design/#example_func","text":"\"\"\" Update the current messages queue with score and weight in param Parameters ---------- score : float The score of given weight weight : pytorch.tensor The weight which needed to be put into this message queue \"\"\" def update ( score , weight )","title":"example_func"},{"location":"sklearn-estimators/sklearn-estimators-usage/","text":"Usage Introduction Currently Chironex can be used on any classification problem Divided into 2 parts: Training and Plotting part Integration with Atolla's environment Training and Plotting Simply train and test with dataset Plot the performance of Jellyfish Integration with Atolla's environment Trained Jellyfish act as critter brain in Atolla's environment Train and export weights of Jellyfish Dataset Training and Plotting In training mode, the number of class does not matter Any tabular classification dataset can be used to train Chironex after preprocessing A sample dataset is provided in the repo which is the cleaned and preprocessed version of Titanic dataset This dataset contains only features without the first line of the names of all features All other datasets should be preproccessed into the same format like the sample dataset to proceed with Chironex Apply Chironex as critter in Atolla's environment When integrate with Atolla, the number of class should match the number of action in Atolla's settings Current setting of Atolla requires number of class >= 4 A sample dataset glass.csv matches the requirement is provided in the repo Warning Atolla did not implement the interface to use Chironex as critter How to use Training and Plotting Preproccess dataset Copy dataset to jellyfish-system folder Open engine.py -> Jump to if __name__ == __main__: Change filename in read_csv to your own dataset Since this is only training, use python engine.py to execute Several plots would be visualized regarding the result of individual and swarm result Apply Chironex as critter in Atolla's environment Preprocess dataset Copy dataset to Critter_Env_Interface folder Modify core.py to of read_csv to make sure the dataset can be read Use python core.py to generate weights Use function load_info in core.py to load the weights into Atolla's environment","title":"Usage"},{"location":"sklearn-estimators/sklearn-estimators-usage/#usage","text":"","title":"Usage"},{"location":"sklearn-estimators/sklearn-estimators-usage/#introduction","text":"Currently Chironex can be used on any classification problem Divided into 2 parts: Training and Plotting part Integration with Atolla's environment","title":"Introduction"},{"location":"sklearn-estimators/sklearn-estimators-usage/#training-and-plotting","text":"Simply train and test with dataset Plot the performance of Jellyfish","title":"Training and Plotting"},{"location":"sklearn-estimators/sklearn-estimators-usage/#integration-with-atollas-environment","text":"Trained Jellyfish act as critter brain in Atolla's environment Train and export weights of Jellyfish","title":"Integration with Atolla's environment"},{"location":"sklearn-estimators/sklearn-estimators-usage/#dataset","text":"","title":"Dataset"},{"location":"sklearn-estimators/sklearn-estimators-usage/#training-and-plotting_1","text":"In training mode, the number of class does not matter Any tabular classification dataset can be used to train Chironex after preprocessing A sample dataset is provided in the repo which is the cleaned and preprocessed version of Titanic dataset This dataset contains only features without the first line of the names of all features All other datasets should be preproccessed into the same format like the sample dataset to proceed with Chironex","title":"Training and Plotting"},{"location":"sklearn-estimators/sklearn-estimators-usage/#apply-chironex-as-critter-in-atollas-environment","text":"When integrate with Atolla, the number of class should match the number of action in Atolla's settings Current setting of Atolla requires number of class >= 4 A sample dataset glass.csv matches the requirement is provided in the repo Warning Atolla did not implement the interface to use Chironex as critter","title":"Apply Chironex as critter in Atolla's environment"},{"location":"sklearn-estimators/sklearn-estimators-usage/#how-to-use","text":"","title":"How to use"},{"location":"sklearn-estimators/sklearn-estimators-usage/#training-and-plotting_2","text":"Preproccess dataset Copy dataset to jellyfish-system folder Open engine.py -> Jump to if __name__ == __main__: Change filename in read_csv to your own dataset Since this is only training, use python engine.py to execute Several plots would be visualized regarding the result of individual and swarm result","title":"Training and Plotting"},{"location":"sklearn-estimators/sklearn-estimators-usage/#apply-chironex-as-critter-in-atollas-environment_1","text":"Preprocess dataset Copy dataset to Critter_Env_Interface folder Modify core.py to of read_csv to make sure the dataset can be read Use python core.py to generate weights Use function load_info in core.py to load the weights into Atolla's environment","title":"Apply Chironex as critter in Atolla's environment"}]}